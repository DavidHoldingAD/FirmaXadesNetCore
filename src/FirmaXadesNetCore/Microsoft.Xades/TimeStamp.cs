// TimeStamp.cs
//
// XAdES Starter Kit for Microsoft .NET 3.5 (and above)
// 2010 Microsoft France
//
// Originally published under the CECILL-B Free Software license agreement,
// modified by Dpto. de Nuevas Tecnologнas de la Direcciуn General de Urbanismo del Ayto. de Cartagena
// and published under the GNU Lesser General Public License version 3.
// 
// This program is free software: you can redistribute it and/or modify
// it under the +terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/. 

using System.Collections;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;
using System.Xml;

namespace Microsoft.Xades;

/// <summary>
/// This class contains timestamp information
/// </summary>
public class Timestamp
{
	private readonly string? _prefix;
	private readonly string? _namespaceUri;

	private EncapsulatedPKIData? _encapsulatedTimeStamp;
	private XMLTimeStamp? _xmlTimeStamp;

	/// <summary>
	/// Gets or sets the tag name.
	/// </summary>
	public string TagName { get; set; }

	/// <summary>
	/// Gets or sets the ID.
	/// </summary>
	public string? Id { get; set; }

	/// <summary>
	/// A collection of hash data infos
	/// </summary>
	public HashDataInfoCollection HashDataInfoCollection { get; set; }

	/// <summary>
	/// The time-stamp generated by a TSA encoded as an ASN.1 data
	/// object
	/// </summary>
	public EncapsulatedPKIData? EncapsulatedTimeStamp
	{
		get => _encapsulatedTimeStamp;
		set
		{
			_encapsulatedTimeStamp = value;
			if (_encapsulatedTimeStamp != null)
			{
				_xmlTimeStamp = null;
			}
		}
	}

	/// <summary>
	/// The time-stamp generated by a TSA encoded as a generic XML
	/// timestamp
	/// </summary>
	public XMLTimeStamp? XMLTimeStamp
	{
		get => _xmlTimeStamp;
		set
		{
			_xmlTimeStamp = value;
			if (_xmlTimeStamp != null)
			{
				_encapsulatedTimeStamp = null;
			}
		}
	}

	/// <summary>
	/// Gets or sets the canonicalization method.
	/// </summary>
	public CanonicalizationMethod? CanonicalizationMethod { get; set; }

	/// <summary>
	/// Constructor with TagName
	/// </summary>
	/// <param name="tagName">Name of the tag when serializing with GetXml</param>
	public Timestamp(string tagName)
		: this(tagName, XadesSignedXml.XmlXadesPrefix, XadesSignedXml.XadesNamespaceUri)
	{
	}

	/// <summary>
	/// Constructor with TagName and prefix
	/// </summary>
	/// <param name="tagName"></param>
	/// <param name="prefix"></param>
	/// <param name="namespaceUri"></param>
	public Timestamp(string tagName, string? prefix, string? namespaceUri)
	{
		TagName = tagName ?? throw new ArgumentNullException(nameof(tagName));
		_prefix = prefix;
		_namespaceUri = namespaceUri;

		HashDataInfoCollection = new HashDataInfoCollection();
		_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
		_xmlTimeStamp = null;
	}

	/// <summary>
	/// Check to see if something has changed in this instance and needs to be serialized
	/// </summary>
	/// <returns>Flag indicating if a member needs serialization</returns>
	public bool HasChanged()
	{
		bool result = false;

		if (HashDataInfoCollection.Count > 0)
		{
			result = true;
		}

		if (_encapsulatedTimeStamp != null && _encapsulatedTimeStamp.HasChanged())
		{
			result = true;
		}

		if (_xmlTimeStamp != null && _xmlTimeStamp.HasChanged())
		{
			result = true;
		}

		return result;
	}

	/// <summary>
	/// Load state from an XML element
	/// </summary>
	/// <param name="xmlElement">XML element containing new state</param>
	public void LoadXml(XmlElement xmlElement)
	{
		if (xmlElement is null)
		{
			throw new ArgumentNullException(nameof(xmlElement));
		}

		Id = xmlElement.HasAttribute("Id")
			? xmlElement.GetAttribute("Id")
			: "";

		var xmlNamespaceManager = new XmlNamespaceManager(xmlElement.OwnerDocument.NameTable);
		xmlNamespaceManager.AddNamespace("xades", XadesSignedXml.XadesNamespaceUri);
		xmlNamespaceManager.AddNamespace("ds", SignedXml.XmlDsigNamespaceUrl);

		HashDataInfoCollection.Clear();
		XmlNodeList? xmlNodeList = xmlElement.SelectNodes("xades:HashDataInfo", xmlNamespaceManager);
		if (xmlNodeList is null)
		{
			throw new Exception($"Missing required HashDataInfo element.");
		}

		IEnumerator enumerator = xmlNodeList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				if (enumerator.Current is not XmlElement iterationXmlElement)
				{
					continue;
				}

				var newHashDataInfo = new HashDataInfo();
				newHashDataInfo.LoadXml(iterationXmlElement);
				HashDataInfoCollection.Add(newHashDataInfo);
			}
		}
		finally
		{
			if (enumerator is IDisposable disposable)
			{
				disposable.Dispose();
			}
		}

		XmlNode? canonicalizationNode = xmlElement.SelectSingleNode("ds:CanonicalizationMethod", xmlNamespaceManager);
		if (canonicalizationNode is null)
		{
			throw new Exception($"Missing required CanonicalizationMethod element.");
		}

		if (canonicalizationNode != null)
		{
			CanonicalizationMethod = new CanonicalizationMethod();
			CanonicalizationMethod.LoadXml((XmlElement)canonicalizationNode);
		}

		xmlNodeList = xmlElement.SelectNodes("xades:EncapsulatedTimeStamp", xmlNamespaceManager);

		if (xmlNodeList is not null
			&& xmlNodeList.Count != 0)
		{
			_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
			_encapsulatedTimeStamp.LoadXml((XmlElement)xmlNodeList.Item(0)!);
			_xmlTimeStamp = null;
		}
		else
		{
			XmlNode? nodeEncapsulatedTimeStamp = xmlElement.ChildNodes
				?.OfType<XmlNode>()
				.FirstOrDefault(x => x.Name == "EncapsulatedTimeStamp");

			if (nodeEncapsulatedTimeStamp != null)
			{
				_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
				_encapsulatedTimeStamp.LoadXml((XmlElement)nodeEncapsulatedTimeStamp);
				_xmlTimeStamp = null;
			}
			else
			{
				xmlNodeList = xmlElement.SelectNodes("xades:XMLTimeStamp", xmlNamespaceManager);
				if (xmlNodeList is not null
					&& xmlNodeList.Count != 0)
				{
					_xmlTimeStamp = new XMLTimeStamp();
					_xmlTimeStamp.LoadXml((XmlElement?)xmlNodeList.Item(0));
					_encapsulatedTimeStamp = null;

				}
				else
				{
					throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp missing");
				}
			}
		}

	}

	/// <summary>
	/// Returns the XML representation of the this object
	/// </summary>
	/// <returns>XML element containing the state of this object</returns>
	public XmlElement GetXml()
	{
		var creationXmlDocument = new XmlDocument();

		XmlElement result = creationXmlDocument.CreateElement(_prefix, TagName, _namespaceUri);

		result.SetAttribute("Id", Id);

		if (CanonicalizationMethod != null)
		{
			result.AppendChild(creationXmlDocument.ImportNode(CanonicalizationMethod.GetXml(), true));
		}

		if (HashDataInfoCollection.Count > 0)
		{
			foreach (HashDataInfo hashDataInfo in HashDataInfoCollection)
			{
				if (hashDataInfo.HasChanged())
				{
					result.AppendChild(creationXmlDocument.ImportNode(hashDataInfo.GetXml(), true));
				}
			}
		}

		if (_encapsulatedTimeStamp != null && _encapsulatedTimeStamp.HasChanged())
		{
			result.AppendChild(creationXmlDocument.ImportNode(_encapsulatedTimeStamp.GetXml(), true));
		}
		else
		{
			if (_xmlTimeStamp == null || !_xmlTimeStamp.HasChanged())
			{
				throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp element missing");
			}

			result.AppendChild(creationXmlDocument.ImportNode(_xmlTimeStamp.GetXml(), true));
		}

		return result;
	}
}
