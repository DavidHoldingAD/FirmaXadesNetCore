// TimeStamp.cs
//
// XAdES Starter Kit for Microsoft .NET 3.5 (and above)
// 2010 Microsoft France
//
// Originally published under the CECILL-B Free Software license agreement,
// modified by Dpto. de Nuevas Tecnologнas de la Direcciуn General de Urbanismo del Ayto. de Cartagena
// and published under the GNU Lesser General Public License version 3.
// 
// This program is free software: you can redistribute it and/or modify
// it under the +terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/. 

using System.Collections;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;
using System.Xml;

namespace Microsoft.Xades;

/// <summary>
/// This class contains timestamp information
/// </summary>
public class TimeStamp
{
	private readonly string _prefix;
	private readonly string _namespaceUri;

	private EncapsulatedPKIData _encapsulatedTimeStamp;
	private XMLTimeStamp _xmlTimeStamp;

	/// <summary>
	/// Gets or sets the tag name.
	/// </summary>
	public string TagName { get; set; }

	/// <summary>
	/// Gets or sets the ID.
	/// </summary>
	public string Id { get; set; }

	/// <summary>
	/// A collection of hash data infos
	/// </summary>
	public HashDataInfoCollection HashDataInfoCollection { get; set; }

	/// <summary>
	/// The time-stamp generated by a TSA encoded as an ASN.1 data
	/// object
	/// </summary>
	public EncapsulatedPKIData EncapsulatedTimeStamp
	{
		get => _encapsulatedTimeStamp;
		set
		{
			_encapsulatedTimeStamp = value;
			if (_encapsulatedTimeStamp != null)
			{
				_xmlTimeStamp = null;
			}
		}
	}

	/// <summary>
	/// The time-stamp generated by a TSA encoded as a generic XML
	/// timestamp
	/// </summary>
	public XMLTimeStamp XMLTimeStamp
	{
		get => _xmlTimeStamp;
		set
		{
			_xmlTimeStamp = value;
			if (_xmlTimeStamp != null)
			{
				_encapsulatedTimeStamp = null;
			}
		}
	}

	/// <summary>
	/// Gets or sets the canonicalization method.
	/// </summary>
	public CanonicalizationMethod CanonicalizationMethod { get; set; }

	/// <summary>
	/// Default constructor
	/// </summary>
	public TimeStamp(string prefix, string namespaceUri)
	{
		HashDataInfoCollection = new HashDataInfoCollection();
		_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
		_xmlTimeStamp = null;

		_prefix = prefix;
		_namespaceUri = namespaceUri;
	}

	/// <summary>
	/// Constructor with TagName
	/// </summary>
	/// <param name="tagName">Name of the tag when serializing with GetXml</param>
	public TimeStamp(string tagName)
		: this(XadesSignedXml.XmlXadesPrefix, XadesSignedXml.XadesNamespaceUri)
	{
		TagName = tagName;
	}

	/// <summary>
	/// Constructor with TagName and prefix
	/// </summary>
	/// <param name="tagName"></param>
	/// <param name="prefix"></param>
	/// <param name="namespaceUri"></param>
	public TimeStamp(string tagName, string prefix, string namespaceUri)
		: this(prefix, namespaceUri)
	{
		TagName = tagName;
	}

	/// <summary>
	/// Check to see if something has changed in this instance and needs to be serialized
	/// </summary>
	/// <returns>Flag indicating if a member needs serialization</returns>
	public bool HasChanged()
	{
		bool retVal = false;

		if (HashDataInfoCollection.Count > 0)
		{
			retVal = true;
		}

		if (_encapsulatedTimeStamp != null && _encapsulatedTimeStamp.HasChanged())
		{
			retVal = true;
		}

		if (_xmlTimeStamp != null && _xmlTimeStamp.HasChanged())
		{
			retVal = true;
		}

		return retVal;
	}

	/// <summary>
	/// Load state from an XML element
	/// </summary>
	/// <param name="xmlElement">XML element containing new state</param>
	public void LoadXml(XmlElement xmlElement)
	{
		XmlNamespaceManager xmlNamespaceManager;
		XmlNodeList xmlNodeList;
		IEnumerator enumerator;
		XmlElement iterationXmlElement;
		HashDataInfo newHashDataInfo;

		if (xmlElement == null)
		{
			throw new ArgumentNullException(nameof(xmlElement));
		}

		if (xmlElement.HasAttribute("Id"))
		{
			Id = xmlElement.GetAttribute("Id");
		}
		else
		{
			Id = "";
		}

		xmlNamespaceManager = new XmlNamespaceManager(xmlElement.OwnerDocument.NameTable);
		xmlNamespaceManager.AddNamespace("xades", XadesSignedXml.XadesNamespaceUri);
		xmlNamespaceManager.AddNamespace("ds", SignedXml.XmlDsigNamespaceUrl);

		HashDataInfoCollection.Clear();
		xmlNodeList = xmlElement.SelectNodes("xades:HashDataInfo", xmlNamespaceManager);
		enumerator = xmlNodeList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				iterationXmlElement = enumerator.Current as XmlElement;
				if (iterationXmlElement != null)
				{
					newHashDataInfo = new HashDataInfo();
					newHashDataInfo.LoadXml(iterationXmlElement);
					HashDataInfoCollection.Add(newHashDataInfo);
				}
			}
		}
		finally
		{
			if (enumerator is IDisposable disposable)
			{
				disposable.Dispose();
			}
		}

		XmlNode canonicalizationNode = xmlElement.SelectSingleNode("ds:CanonicalizationMethod", xmlNamespaceManager);

		if (canonicalizationNode != null)
		{
			CanonicalizationMethod = new CanonicalizationMethod();
			CanonicalizationMethod.LoadXml((XmlElement)canonicalizationNode);
		}

		xmlNodeList = xmlElement.SelectNodes("xades:EncapsulatedTimeStamp", xmlNamespaceManager);

		if (xmlNodeList.Count != 0)
		{
			_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
			_encapsulatedTimeStamp.LoadXml((XmlElement)xmlNodeList.Item(0));
			_xmlTimeStamp = null;
		}
		else
		{
			XmlNode nodeEncapsulatedTimeStamp = null;

			foreach (XmlNode node in xmlElement.ChildNodes)
			{
				if (node.Name == "EncapsulatedTimeStamp")
				{
					nodeEncapsulatedTimeStamp = node;
					break;
				}
			}

			if (nodeEncapsulatedTimeStamp != null)
			{
				_encapsulatedTimeStamp = new EncapsulatedPKIData("EncapsulatedTimeStamp");
				_encapsulatedTimeStamp.LoadXml((XmlElement)nodeEncapsulatedTimeStamp);
				_xmlTimeStamp = null;
			}
			else
			{
				xmlNodeList = xmlElement.SelectNodes("xades:XMLTimeStamp", xmlNamespaceManager);
				if (xmlNodeList.Count != 0)
				{
					_xmlTimeStamp = new XMLTimeStamp();
					_xmlTimeStamp.LoadXml((XmlElement)xmlNodeList.Item(0));
					_encapsulatedTimeStamp = null;

				}
				else
				{
					throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp missing");
				}
			}
		}

	}

	/// <summary>
	/// Returns the XML representation of the this object
	/// </summary>
	/// <returns>XML element containing the state of this object</returns>
	public XmlElement GetXml()
	{
		XmlDocument creationXmlDocument;
		XmlElement retVal;

		creationXmlDocument = new XmlDocument();

		retVal = creationXmlDocument.CreateElement(_prefix, TagName, _namespaceUri);

		//retVal.SetAttribute("xmlns:ds", SignedXml.XmlDsigNamespaceUrl);

		retVal.SetAttribute("Id", Id);

		/*  XmlElement canonicalization = creationXmlDocument.CreateElement("CanonicalizationMethod", SignedXml.XmlDsigNamespaceUrl);
              canonicalization.SetAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");

              retVal.AppendChild(canonicalization);*/

		//   XmlDsigC14NTransform xmlDsigC14NTransform = new XmlDsigC14NTransform();

		if (CanonicalizationMethod != null)
		{
			retVal.AppendChild(creationXmlDocument.ImportNode(CanonicalizationMethod.GetXml(), true));
		}

		if (HashDataInfoCollection.Count > 0)
		{
			foreach (HashDataInfo hashDataInfo in HashDataInfoCollection)
			{
				if (hashDataInfo.HasChanged())
				{
					retVal.AppendChild(creationXmlDocument.ImportNode(hashDataInfo.GetXml(), true));
				}
			}
		}

		if (_encapsulatedTimeStamp != null && _encapsulatedTimeStamp.HasChanged())
		{
			retVal.AppendChild(creationXmlDocument.ImportNode(_encapsulatedTimeStamp.GetXml(), true));
		}
		else
		{
			if (_xmlTimeStamp != null && _xmlTimeStamp.HasChanged())
			{
				retVal.AppendChild(creationXmlDocument.ImportNode(_xmlTimeStamp.GetXml(), true));
			}
			else
			{
				throw new CryptographicException("EncapsulatedTimeStamp or XMLTimeStamp element missing");
			}
		}

		return retVal;
	}
}
